'use strict';
//функции-конструкторы.

//функция по классификации типов данных является объектом и в нее можно записать какие-то методы и свойства;

// существует длинный синтаксис для создания типов двнных который начинается с ключевого слова new
const num = new Number(3); 
console.log(num);


function User (name, id) { // функция-конструктор с помощью которой можно создать новый объект
    this.name = name;
    this.id = id;
    this.human = true;
    this.hello  = function () { //создание метода 
        console.log(`Hello ${this.name}`);
    };
}

//метод prototype используется когда мы не имеем доступа к прототипу или  не можем менять прототип
User.prototype.exit = function () {
    console.log(`пользователь ${this.name} ушел`);
};
// то. этот метод будет наследоваться прототипно у всех потомков этого объекта
//мы указываем не протитип, как это было в setPrototype, когда одно наследуется от другого, а просто добавляем новые свойства или методы в уже существующий объект

const ivan = new User('Ivan', 28); //внутри этой перенменной уже находится объект
const alex = new User('Alex', 20);

ivan.hello(); //используем метод объекта 
alex.hello();

ivan.exit(); // используем метод созданный с помощью прототипа

console.log(ivan);
console.log(alex);

// в функции-конструкторе return не нужен тк ими мы ничего не возвращаем


//конструкторы нужны для создания новых однотипных объектов, используется везде где есть шаблонизация

//в стандарте ES6 появились классы (синтаксический сахар, те красивая обертка всего вышеописанного функционала)
//в JS изначально классов не было они появились в качестве синтаксического сахара в ES6