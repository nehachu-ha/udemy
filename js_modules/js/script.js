'use strict'

// //Модули CommonJS

// const myModule = require('./main'); //импортируем кусочек файла из main.js
//
// const myModuleInstance = new myModule(); //создаем объект
//
// myModuleInstance.hello(); //используем методы которые были прописаны в файле main.js
// myModuleInstance.goodbye();
//
//
// //брайзер не уметт собирать модули самостоятельно, брайзер не знает функцию require; любая модульная система ддолжна быть собрана в один результирующий файл.
// //для сборки модулей необходим какой-то сборщик напр webpack. она умеет собирать не только скрипты но и полностью конфигурировать проект(обрабатывать стили катинки формировать папки и прочее)
// //GULP - это планировщик задач, с его помощью можно формировать различные таски, он не умеет собирать модули он лишь подключает в себя какие-то модули и выполняет определнные задачи когда мы от него это требуем
// //WEBPACK - это сборщик модулей, он настраивается для того чтобы он собирал проект и выполнял свои задачи
// //GULP и WEBPACK  можно комбинировать, например при помощи GULP можно запускать WEBPACK




// //Модули ES6
//
// import {one, two} from './main'; // используется такой синтаксис для подключения сущностей в другой файл
// console.log(`${one} and ${two}`);
//
//
// import {one as first} from './main'; //переименовыем объект прямо в обявлении импорта, такой синтаксис используется когда импортируем очень длинное название
// console.log(first);
//
// import * as data from './main'; //импортирует абсолютно все что хотели экспортировать и нужно этому дать название, экспортируем объект data
// console.log(`${data.one} and ${data.two}`);
// data.sayHi();
//
// //кроме именованного синтаксиса существует экспорт по умолчанию, он может быть только один
// import sayHi from './main'; // теперь такая сущность экспортируется не как объект, а напрямую
// sayHi();// то ее можно использовать как отдельную фукнкцию




// атрибут <script type="module">

import {one, two} from './main.js';
console.log(`${one} and ${two}`);
