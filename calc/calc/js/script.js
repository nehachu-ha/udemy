'use strict';

//AJAX - Asynchronous Javascript and XML 
//чтобы наш HTML умел общаться с сервером нам необходимы HTTP-запросы, мы можем запрашивать данные, постить данные и выполнять другие операции, 
//и чтобы все это происходило асинхронно (без перезагрузки страницы) нужна технология AJAX
//сейчас AJAX реализуется несколькими способами


//вариант AJAX, который реализуется при помощи объекта XMLHttpRequest - этот вариант уже не актуален

const inputUsd = document.querySelector('#usd');
const inputRub = document.querySelector('#rub');

inputRub.addEventListener('input', () => {
    const request = new XMLHttpRequest();

    //request.open(method, url, async, login, password); 
    //этот метод собирает настройки, которые в будущем помогут сделать запрос, принимает след аргументы method(get, post), url - путь к серверу, async - отвечает за асинхронность, login, password;
    //AJAX запросы по умолчанию являются асинхронным кодом, изначально параметр async = true, но можно поставить в позицию false

    //get запрос - получает данные у сервера
    //post запрос - отправляет данные на сервер
    //методы записываются всегда в верхнем регистре
    //запросы отправляются с HTML файла, поэтому путь формируется относительно index.html

    request.open('GET', 'js/current.json');
    //при отправке запроса, нужно сказать какую именно информацию нужно получить, делается это для того, чтобы трансферные протоколы четко понимали что они передают, 
    //а сервер точно понимал, что он принимает. Для этого существуют HTTP-заголовки
    request.setRequestHeader('Content-type', 'application/json; charset=utf-8'); 
    //используем метод для отправки запроса
    request.send(); 
    //метод запроса будет отличаться в зависимости от того метода который будет использован в методе open
    //когда используем метод get то мы ничего не отправляем на сервер
    //когда используем метод post то мы отправляет какие-то данные на сервер
    //метод send может принимать в качестве аргумента body - это какие-то данные, которые уходят на сервер, они существуют в post и других менее популярных методах
    
    //СВОЙСТВА которые относятся к объекту XMLHttpRequest:
    //status - свойство, которо показывает статус запроса (404, 0, 200, 403)
    //statusText - текстовое описание ответа от сервера (OK, Not found...)
    //response - ответ от сервера, то что нам задал бэкэнд разработчик
    //responseText
    //readyState - содержит текущее состояние нашего запроса


    //СОБЫТИЯ которые относятся к объекту XMLHttpRequest:
    //loadstart - начало загрузки
    //progress
    //abord
    //timeout
    //loadend
    //readystatechange - это событие отслеживает готовность нашего запроса в текущий момент, те оно следит за свойством readyState
    //load  - срабатывает когда запрос полностью загрузился и мы получили какой-то результат, срабатывает только один раз

    // request.addEventListener('readystatechange', () => {
    //     if (request.readyState === 4 && request.status === 200) {
    //         console.log(request.response);// выводим в консоль ответ от сервера
    //         const data = JSON.parse(request.response); //переводим объект JSON в какой-то понятный формат и получаем обычный JS объект который мы можем использовать

    //         //далее рассчитываем курс валют из того что ввел пользователь и того что пришло с сервера
    //         inputUsd.value = (+inputRub.value / data.current.usd). toFixed(2);
    //         //с помощью метода toFixed приводим значение к виду- сколько-то знаков после точки
    //     } else { //здесь опишем, если вдруг что-то произошло с сервером, не оставлять пользователя в неведении
    //         inputUsd.value = 'Что-то пошло не так';
    //     }
    // });


    request.addEventListener('load', () => {  // этот способ работает точно также 
        if (request.status === 200) {
            const data = JSON.parse(request.response); 
            inputUsd.value = (+inputRub.value / data.current.usd). toFixed(2);
        } else { 
            inputUsd.value = 'Что-то пошло не так';
        }
    });
});

